{"version":3,"sources":["function/Function1.js","function/Function2.js","class/Class1.js","class/Class2.js","App.js","serviceWorker.js","index.js"],"names":["Function1","props","data1","Function2","data2","Class1","state","e","preventDefault","this","setState","src","alt","width","href","onClick","rubahdata","Component","Class2","artikel","align","rubahartikel","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNASeA,MAPf,SAAmBC,GACf,OACI,6BACI,gCAAQ,4BAAKA,EAAMC,OAAW,gCCI3BC,EAPG,SAACF,GACf,OACI,6BACI,gCAAQ,4BAAKA,EAAMG,U,4BCqBhBC,E,kDAvBX,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IACDK,MAAM,CACPJ,MAAO,oFAHG,E,sDAMRK,GACNA,EAAEC,iBACFC,KAAKC,SAAS,CACXR,MAAO,sD,+BAGL,IAAD,OACJ,OACI,6BACI,gCACI,yBAAKS,IAAKF,KAAKH,MAAMJ,MAAOU,IAAI,QAAQC,MAAM,QAAO,6BACrD,uBAAGC,KAAK,IAAIC,QAAS,SAACR,GAAD,OAAK,EAAKS,UAAUT,KAAzC,4B,GAlBCU,aC0BNC,E,kDAzBX,WAAYjB,GAAO,IAAD,8BACpB,cAAMA,IACDK,MAAM,CACVa,QAAS,kkBAHU,E,yDAMLZ,GACTA,EAAEC,iBACFC,KAAKC,SAAS,CACVS,QAAS,2qC,+BAGR,IAAD,OACJ,OACI,6BACI,gCACI,kDACA,uBAAGC,MAAM,WAAWX,KAAKH,MAAMa,SAC/B,uBAAGL,KAAK,IAAIC,QAAS,SAACR,GAAD,OAAK,EAAKc,aAAad,KAA5C,0B,GAnBCe,IAAML,WCkBZM,MAbf,WACE,OACE,6BACE,kBAAC,EAAD,CAAWrB,MAAM,4CACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWE,MAAM,yBACjB,6BACA,gCAAQ,yDCHMoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5291a88b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Function1(props){\n    return(\n        <div>\n            <center><h1>{props.data1}</h1><hr/></center>\n        </div>\n    )\n}\nexport default Function1;","import React from 'react';\n\nconst Function2 = (props) => {\n    return(\n        <div>\n            <center><h1>{props.data2}</h1></center>\n        </div>\n    )\n}\nexport default Function2;","import React, {Component} from 'react';\n\nclass Class1 extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            data1: \"https://www.kali.org/wp-content/uploads/2020/05/release-2020.2-kali-kde-dark.png\"\n        }\n    }\n    rubahdata(e){\n        e.preventDefault()\n        this.setState({\n           data1: \"https://docs.parrotlinux.org/img/macaw-poly.jpg\" \n        })\n    }\n    render(){\n        return(\n            <div>\n                <center>\n                    <img src={this.state.data1} alt=\". . .\" width=\"600\"/><br/>\n                    <a href=\"/\" onClick={(e)=>this.rubahdata(e)}>Gambar Selanjutnya</a> \n                </center>\n            </div>\n        )\n    }\n}\nexport default Class1;","import React from 'react';\n\nclass Class2 extends React.Component{\n    constructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tartikel: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\n\t\t}\n    }\n    rubahartikel(e){\n        e.preventDefault()\n        this.setState({\n            artikel: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\"\n        })\n    }\n    render(){\n        return(\n            <div>\n                <center>\n                    <h2>Linux Distribution</h2>   \n                    <p align=\"justify\">{this.state.artikel}</p>\n                    <a href=\"/\" onClick={(e)=>this.rubahartikel(e)}>lebih lengkap >></a>\n                </center>         \n            </div>\n        )\n    }\n    \n}\nexport default Class2;","import React from 'react';\nimport './App.css';\nimport Function1 from './function/Function1';\nimport Function2 from './function/Function2';\nimport Class1 from './class/Class1';\nimport Class2 from './class/Class2';\n\nfunction App() {\n  return (\n    <div>\n      <Function1 data1=\"Penestration Testing Linux Distribution\"/>\n      <Class1/>\n      <Class2/>\n      <Function2 data2=\"BKPSDM x NIOMIC 2020\"/>\n      <hr/>\n      <center><p>&copy;kristian_singo 2020</p></center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}